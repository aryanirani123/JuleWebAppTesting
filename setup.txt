Firestore Setup Instructions for Feedback Application

This document guides you through setting up Google Cloud Firestore to be used as the backend for the feedback application.

1. Create or Select a Google Cloud Project:
   - Go to the Google Cloud Console: https://console.cloud.google.com/
   - If you don't have an existing project, create a new one. Otherwise, select the project you want to use.

2. Enable the Firestore API:
   - In the Google Cloud Console, navigate to "APIs & Services" > "Library".
   - Search for "Cloud Firestore API".
   - Select it and click "Enable". If it's already enabled, you can skip this step.

3. Create a Firestore Database:
   - In the Google Cloud Console, navigate to "Firestore" (you can use the search bar).
   - Click "Select Native Mode" for the database type. (Do NOT select "Datastore Mode" unless you have specific reasons, as the application is configured for Firestore Native Mode).
   - Choose a location (region) for your database. This cannot be changed later.
   - Click "Create Database".

4. Set Up Authentication:
   Firestore requires authentication to allow the application to access it. The recommended way for local development and server environments is using a service account.

   a. Create a Service Account:
      - In the Google Cloud Console, go to "IAM & Admin" > "Service Accounts".
      - Click "+ CREATE SERVICE ACCOUNT".
      - Fill in the service account details:
        - Service account name (e.g., "feedback-app-service-account").
        - Service account ID (will be auto-generated).
        - Description (optional).
      - Click "CREATE AND CONTINUE".

   b. Grant Permissions:
      - In the "Grant this service account access to project" step, select a role that allows reading and writing to Firestore. The "Cloud Datastore User" role (which includes Firestore permissions) or "Firebase Rules System" (if using Firebase rules, though not covered here) are common choices. For simplicity and broad access to Firestore, "Editor" can be used during development, but for production, use the principle of least privilege (e.g., "Cloud Datastore User" or a custom role with only `datastore.entities.create` and `datastore.entities.list` permissions if that's all you need).
      - Click "CONTINUE".

   c. Create a Service Account Key:
      - Skip the "Grant users access to this service account" step (unless needed) and click "DONE".
      - Find the service account you just created in the list.
      - Click on the three dots (Actions) menu for that service account and select "Manage keys".
      - Click "ADD KEY" > "Create new key".
      - Choose "JSON" as the key type and click "CREATE".
      - A JSON file containing your service account credentials will be downloaded. Keep this file secure and do not commit it to your repository.

   d. Set Environment Variable:
      - The Python Firestore client library automatically finds the credentials if you set the `GOOGLE_APPLICATION_CREDENTIALS` environment variable to the path of the JSON key file you downloaded.
      - On Linux/macOS:
        export GOOGLE_APPLICATION_CREDENTIALS="/path/to/your/keyfile.json"
      - On Windows (Command Prompt):
        set GOOGLE_APPLICATION_CREDENTIALS="C:\path\to\your\keyfile.json"
      - On Windows (PowerShell):
        $env:GOOGLE_APPLICATION_CREDENTIALS="C:\path\to\your\keyfile.json"
      - You might want to add this to your shell's profile file (e.g., .bashrc, .zshrc) for persistence across sessions for local development. For deployed applications, the hosting environment will have its own way of setting environment variables (e.g., App Engine, Cloud Run, Kubernetes secrets).

5. Firestore Collection ('feedback'):
   - The application is configured to use a collection named `feedback`.
   - You do not need to create this collection manually. Firestore will automatically create the collection when the first feedback document is added by the application.

6. Install Dependencies:
   - Ensure you have the `google-cloud-firestore` Python package installed. If you have cloned the repository, you can install it using the `requirements.txt` file:
     pip install -r requirements.txt

Once these steps are completed, the application should be able to connect to your Firestore database and store/retrieve feedback.
